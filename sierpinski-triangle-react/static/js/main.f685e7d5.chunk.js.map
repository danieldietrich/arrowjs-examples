{"version":3,"sources":["serviceWorker.js","index.js"],"names":["Boolean","window","location","hostname","match","dy","Math","sin","PI","Triangle","depth","num","x","y","w","h","w2","useState","label","setLabel","useEffect","style","position","top","trunc","left","width","height","viewBox","preserveAspectRatio","className","points","vectorEffect","fill","w4","h2","numerus","i","s","String","pow_exp","z","log","schedule","Promise","resolve","then","bind","setTimeout","SierpinskiTriangle","size","setSize","useLayoutEffect","handleResize","innerWidth","innerHeight","addEventListener","removeEventListener","useWindowSize","setDepth","speed","setSpeed","factor","setFactor","stats","useRef","fps","millis","Date","now","renders","components","pow","requestAnimationFrame","current","t","nextFactor","prevFactor","id","class","type","min","max","step","value","onChange","e","target","round","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f685e7d5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useLayoutEffect, useRef, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles.css';\nimport * as serviceWorker from './serviceWorker';\n\n// custom hook that provides { width, height } of the window\nconst useWindowSize = () => {\n  const [size, setSize] = useState({ width: 0, height: 0 })\n  useLayoutEffect(() => {\n    const handleResize = () => setSize({ width: window.innerWidth, height: window.innerHeight })\n    window.addEventListener(\"resize\", handleResize)\n    handleResize()\n    return () => window.removeEventListener(\"resize\", handleResize)\n  }, [])\n  return size\n}\n\n// constant for calculating the y coordinate of the next triangle layer\nconst dy = Math.sin(Math.PI / 2)\n\nconst Triangle = ({depth, num, x, y, w, h}) => {\n  const w2 = w / 2\n  if (depth <= 0) {\n    /* eslint-disable react-hooks/rules-of-hooks */\n    // in this case it is allowed to use hooks in an if-condition because depth is constant\n    const [label, setLabel] = useState(num)\n    useEffect(() => setLabel(num), [num])\n    /* eslint-enable react-hooks/rules-of-hooks */\n    return (\n      <svg style={{position: \"absolute\", top: Math.trunc(y), left: Math.trunc(x - w2), width: Math.trunc(w), height: Math.trunc(h)}} viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n        <polygon className=\"triangle\" points=\"50 0, 100 100, 0 100\" vectorEffect=\"non-scaling-stroke\" />\n        <text className=\"triangle-text\" x=\"29\" y=\"72\" fill=\"FloralWhite\">{label}</text>\n      </svg>\n    )\n  } else {\n    const w4 = w / 4, h2 = h / 2\n    depth--\n    return (\n      <>\n        <Triangle depth={depth} num={num} x={x} y={y} w={w2} h={h2} />\n        <Triangle depth={depth} num={num} x={x - w4} y={y + dy * h2} w={w2} h={h2} />\n        <Triangle depth={depth} num={num} x={x + w4} y={y + dy * h2} w={w2} h={h2} />\n      </>\n    )\n  }\n}\n\n// singular for i = 1 otherwise plural\nconst numerus = (i, s) => String(i) + ' ' + (i <= 1 ? s : s + 's')\n\n// computes x, y, shrinked width and height given full width, height and a factor\nconst computeSize = (w, h, f) => ({ x: w / 2, y: 0, w: w * f, h })\n\n// a sinus based movement, in: [0..1], out: [0..1]\nconst ease = t => (Math.sin(Math.PI * 2 * t) + 1) / 2\n\n// power: x ^ y = z, power exponent: y = ln z / ln x, see https://math.stackexchange.com/a/1125315/834229\nconst pow_exp = (z, x) => Math.log(z) / Math.log(x)\n\n// schedules a computation with a Promise if available, otherwise falls back to setTimeout\nconst schedule = typeof Promise === 'function' ? Promise.resolve().then.bind(Promise.resolve()) : setTimeout\n\n// Render the whole president table\nconst SierpinskiTriangle = () => {\n\n  const { width, height } = useWindowSize()   // we react to browser window size changes\n  const [depth, setDepth] = useState(4)       // Sierpinski triangle depth\n  const [speed, setSpeed] = useState(50)     // the speed slider uses a logarithmic scale for better UX, see below\n  const [factor, setFactor] = useState(1)     // shrink factor of triangle width\n  const stats = useRef({\n    fps: 60,\n    millis: Date.now(),\n    renders: 0\n  })\n  const components = Math.trunc((1 - Math.pow(3, Math.trunc(depth) + 1)) / (1 - 3)) // we have Sum_0..n(3^n) components, see https://en.wikipedia.org/wiki/Geometric_series\n\n  // Animation loop by deferring state changes (here: setFactor), which perform a new component render.\n  // Internally, each render is done on the browsers animation frame (requestAnimationFrame()), which runs every 16 ms (= 60 fps)\n  useLayoutEffect(() => {\n    schedule(() => requestAnimationFrame(() => {\n      const { current } = stats\n      const now = Date.now()\n      current.renders++\n      if (now - current.millis >= 1000) {\n        current.millis = now\n        current.fps = current.renders\n        current.renders = 0\n      }\n      const nextFactor = ease((now / speed) % 100 / 100)\n      setFactor(prevFactor => (prevFactor === nextFactor) ? nextFactor + 1e-9 : nextFactor) // prevent animation stop\n    }))\n  }, [factor]) // eslint-disable-line react-hooks/exhaustive-deps\n\n  return (\n    <>\n      <div id=\"stats\">\n        <div class=\"lib\">\n          <span class=\"lib-name\">React</span>\n          <span class=\"lib-version\">10.3.2</span>\n        </div>\n        <div className=\"fps\">{stats.current.fps} fps</div>\n        <div className=\"stat\">{width} x {height} px</div>\n        <div className=\"stat\">{numerus(components, 'component')}</div>\n        <div className=\"stat\">{numerus(components * 3, 'node')}</div>\n      </div>\n      <div id=\"controls\">\n        <div class=\"control\">\n          <div class=\"control-label\">Depth</div>\n          <div class=\"control-value\">{depth}</div>\n          <input class=\"control-range\" type=\"range\" min=\"0\" max=\"8\" step=\"1\" value={depth} onChange={(e) => setDepth(e.target.value)}></input>\n        </div>\n        <div class=\"control\">\n          <div class=\"control-label\">Speed</div>\n          <div class=\"control-value\">{Math.round(101 - pow_exp(speed, 1.08))}</div>\n          <input class=\"control-range\" type=\"range\" min=\"1\" max=\"100\" step=\"1\" value={101 - pow_exp(speed, 1.08)} onChange={(e) => setSpeed(Math.pow(1.08, 101 - e.target.value))}></input>\n        </div>\n      </div>\n      <div id=\"triangle\">\n        {width * height > 0 && <Triangle depth={depth} num={Math.trunc(factor * 100)} {...computeSize(width, height, factor)} />}\n      </div>\n    </>\n  )\n}\n\n// Entry point: mount president table to DOM\nReactDOM.render(<SierpinskiTriangle />, document.getElementById('app'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}